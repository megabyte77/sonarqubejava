name: CI/CD Pipeline with SonarQube & Docker Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  sonar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Run SonarScanner
        run: |
          mvn clean verify sonar:sonar \
          -Dsonar.projectKey=sonarqube-java \
          -Dsonar.host.url=http://13.232.4.242:9094 \
          -Dsonar.login=sqp_d1b0751b50d3e084fe59f5d63f0644e29a28b6e3

      - name: SonarQube Quality Gate Check
        id: sonar_quality_gate
        run: |
          STATUS=$(curl -s -u sqp_d1b0751b50d3e084fe59f5d63f0644e29a28b6e3: \
          "http://13.232.4.242:9094/api/qualitygates/project_status?projectKey=sonarqube-java" \
          | jq -r '.projectStatus.status')

          echo "Quality Gate Status: $STATUS"
          if [[ "$STATUS" != "OK" ]]; then
            echo "❌ SonarQube Quality Gate failed!"
            exit 1
          fi

  docker:
    needs: sonar
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Image Tag
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "IMAGE_TAG=${COMMIT_HASH}_${TIMESTAMP}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: |
          IMAGE_NAME=luther443/sonarqubejava:${IMAGE_TAG}
          echo "Building Docker image with tag $IMAGE_NAME"
          docker build . --file Dockerfile --tag $IMAGE_NAME
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      - name: Scan Docker Image for Vulnerabilities
        id: trivy_scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.IMAGE_NAME }}"
          format: "table"
          exit-code: 1 # Fails pipeline if vulnerabilities are found
          ignore-unfixed: true

      - name: Log in to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker Image
        if: success()
        run: |
          docker push ${{ env.IMAGE_NAME }}
          echo "✅ Docker image pushed: ${{ env.IMAGE_NAME }}"
